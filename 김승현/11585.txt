import sys
import math
def kmp_table(pattern):  # 파이 배열
    length = len(pattern)
    table = [0] * length

    j = 0
    for i in range(1, length):
        while j > 0 and pattern[i] != pattern[j]:
            j = table[j - 1]

        if pattern[i] == pattern[j]:
            j += 1
            table[i] = j

    return table

def kmp_search(text, pattern):
    table = kmp_table(pattern)
    indices = []  # 패턴이 텍스트에서 발견된 위치의 인덱스
    j = 0  # 패턴의 인덱스

    for i in range(len(text)):
        while j > 0 and text[i] != pattern[j]:
            j = table[j - 1]

        if text[i] == pattern[j]:
            if j == len(pattern) - 1:
                indices.append(i - len(pattern) + 1)
                j = table[j]
            else:
                j += 1
    tmp = 0
    for i in indices:
        if i < n:
            tmp += 1
    return tmp


# 입출력
n = int(sys.stdin.readline().rstrip())
p = list(map(str, sys.stdin.readline().rstrip().split()))
pattern = "".join(p)
text= "".join(list(map(str, sys.stdin.readline().rstrip().split())))*2
B = n # 전체 경우의 수
A = kmp_search(text,pattern)
C = math.gcd(A,B)
A //= C
B //= C
print(f"{A}/{B}")